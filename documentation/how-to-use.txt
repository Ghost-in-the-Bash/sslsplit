How to Use SSLsplit-NetGrok
Last edited: 2018-09-26
--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
All examples here use SSLsplit version 0.5.3.
About SSLsplit: https://www.roe.ch/SSLsplit

The netgrok() function in netgrok.c takes input passed in from pxy_bev_readcb()
in pxyconn.c. It then outputs info about the connections in JSON format to an
inter-process socket.

The following files of the original SSLsplit have been modified for NetGrok:
- pxyconn.c
- GNUmakefile: starting at line 340
  - musl-fts library link for OpenWRT
  - zmq library link for netgrok.c

The following additions were made to SSLsplit for NetGrok
- new src/ directory
  - all source files were moved into src/
- /src/
  - netgrok.c
  - netgrok.h
- new documentation/ directory
- /documentation/
  - how-to-use.txt
  - sslsplit-0.5.3.1.txt
- /
  - Makefile
--------------------------------------------------------------------------------


Contents
--------------------------------------------------------------------------------
0: SSLsplit-NetGrok on an Ubuntu machine acting as the default gateway (router)
1: Cross-compiling an SSLsplit-NetGrok package for a specific OpenWRT router
2: Installing and running the SSLsplit-NetGrok package on an OpenWRT router
3: Compiling an OpenWRT firmware image with SSLsplit-NetGrok included
--------------------------------------------------------------------------------


0: SSLsplit-NetGrok on an Ubuntu machine acting as the default gateway (router)
--------------------------------------------------------------------------------
Reference: https://blog.heckel.xyz/2013/08/04/use-sslsplit-to-transparently-sniff-tls-ssl-connections/

This is the simplist way to use SSLsplit-NetGrok. The machine running
SSLsplit-NetGrok acts as a router (and man-in-the-middle) for the client. For
this example, both the client and router were 64-bit Ubuntu Linux machines.

0. Download SSLsplit-NetGrok onto the Ubuntu machine acting as the router:

  a. Clone the GitHub repository:

  git clone https://github.com/ghost-in-the-bash/sslsplit-netgrok sslsplit-netgrok

  b. Next, install libevent and libssl so sslsplit can handle large numbers of
  ssl connections simultaneously:

  sudo apt-get install libssl-dev libevent-dev


1. Generate a Certificate Authority key and certificate. Eventually, this step
will be automated on the OpenWRT router to generate a NetGrok CA key and
certificate if they are not present. Generate a key and certificate in the
sslsplit-netgrok/ directory:

openssl genrsa -out netgrok.key 4096
openssl req -new -x509 -days 1826 -key netgrok.key -out netgrok.crt

  Country:             US
  State:               New York
  City:                West Point
  Organization:        NetGrok CA
  Organizational Unit: NetGrok II
  Common Name:         NetGrok
  Email Address:


2. Configure the Ubuntu machine acting as the router:

  a. Enable IP forwarding:

  sudo sysctl -w net.ipv4.ip_forward=1

  b. Delete all current NAT rules, just in case:

  sudo iptables -t nat -F

  c. Configure NAT to redirect packets to ports that SSLsplit listens to:

  sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
  sudo iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443
  sudo iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443
  sudo iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443
  sudo iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443
  sudo iptables -t nat -A PREROUTING -p tcp --dport 5222 -j REDIRECT --to-ports 8080

  These rules redirect HTTP, HTTPS, SMTP, IMAP, and WhatsApp packets.


3. Run SSLsplit-NetGrok from the sslsplit-netgrok/src/ directory on the Ubuntu
machine acting as the router:

make clean
make
./sslsplit -S ../ -k ../netgrok.key -c ../netgrok.crt ssl 0.0.0.0 8443 tcp 0.0.0.0 8080

The -S option would normally write the decrypted content of connections to log
files. However, logger.c has been modified to not make logs at all, and log.c
has been modified to direct content to netgrok.c. The netgrok() function dumps
connections in JSON format to standard output.


4. Configure the client's web browser (if the CA cert is not already installed):

  a. Copy the netgrok.crt onto the client machine

  b. Open up Firefox and go to Preferences > Privacy & Security >
  View Certificates > Authorities > Import, and then select the netgrok.crt


5. Configure the client's default gateway:

  a. Add a new default gateway. It is critical that you do this before deleting
  the original default gateway if you are using the client through SSH, or else
  you will disconnect. Use the IP address of the Ubuntu machine acting
  as the router:

  sudo route add default gw <router_ip_address>

  b. Delete the client's original default gateway:

  sudo route del default gw <original_gw_ip_address>


Now you should be able to open up Firefox and go to any website. Click on the
secure HTTPS lock icon in the URL bar to display the certificate. It should be
verified by the NetGrok CA.
--------------------------------------------------------------------------------


1: Cross-compiling an SSLsplit-NetGrok package for a specific OpenWRT router
--------------------------------------------------------------------------------
Reference: https://openwrt.org/docs/guide-developer/helloworld/start

For this example, SSLsplit-NetGrok was cross-compiled for OpenWRT 18.06.0 on a
64-bit Ubuntu Linux machine.

0. Download the OpenWRT source:

  a. Install prerequisites for OpenWRT:

  sudo apt-get install build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev

  The table of prerequisites for OpenWRT can be found here:
  https://openwrt.org/docs/guide-developer/build-system/install-buildsystem

  b. Clone the OpenWRT git repository:

  git clone https://git.openwrt.org/openwrt/openwrt.git openwrt

  c. Move into the main openwrt/ directory and remove any build artifacts:

  cd openwrt
  make distclean


1. Find technical data about your router:

  a. Go to https://openwrt.org/toh/start and find your router
  b. Under the 'Device Techdata' column, click 'View/Edit data'
  c. Have this open for reference for the next step


2. Use the build system configuration interface to set build settings:

  a. Move into the main openwrt/ directory and open up the interface:

  cd openwrt
  make menuconfig

  b. Reference the information found in step 1 and set the following:
    1. Target System
    2. Subtarget
    3. Target Profile (device model)

  C. Use the arrow keys to select 'Save'
  d. Select 'Ok'
  e. Exit the menuconfig interface


3. Prepare the OpenWRT build system:

  a. Build the cross-compilation toolchain. This will take awhile.

  make toolchain/install

  b. Add the target-independent tools into your PATH variable:

  export PATH=/home/<user>/openwrt/staging_dir/host/bin:$PATH


4. Prepare SSLsplit-NetGrok:

  a. If there is still a key and certificate file in the sslsplit-netgrok/ dir,
  delete them. They are not needed for cross-compiling.

  b. Change an SSLsplit-NetGrok dependency to work with OpenWRT
    1. Edit the sslsplit-netgrok/src/GNUmakefile
    2. Go to where I commented (line 340), "In order to work in OpenWRT 18.06.0,
    the musl-fts library needs to be linked"
    3. Uncomment the 'LIBS += -lfts'

  The Makefile in the sslsplit-netgrok/ directory already includes musl-fts.


5. Create a package feed for SSLsplit-NetGrok:

  a. Make the package feed source directory:

  cd /home/<user>/
  mkdir netgrok

  b. Move the NetGrok-SSLsplit source into the package feed source directory:

  mv -r netgrok-sslsplit netgrok

  c. Set the feed:

  cd openwrt

  Edit feeds.conf.default to include the following line:

  src-link netgrok /home/<user>/netgrok


6. Update and install the packages. Do this from within the main openwrt/ dir:

  a. Make the musl-fts package available:

  ./scripts/feeds update musl-fts
  ./scripts/feeds install musl-fts

  b. Make the zmq package available:

  ./scripts/feeds update zmq
  ./scripts/feeds install zmq

  c. Make all NetGrok packages available:

  ./scripts/feeds update netgrok
  ./scripts/feeds install -p netgrok


7. Build the SSLsplit-NetGrok package:

  a. Open the configuration menu:

  make menuconfig

  b. Find the sslsplit-netgrok package in 'Network'
  c. Press 'Y' to select the sslsplit-netgrok package to make it available
  d. Go into 'Libraries' and select the musl-fts package and libzmq-nc package
  e. Save and exit the menuconfig interface.
  f. Compile:

  make package/sslsplit-netgrok/{clean,compile}

The package should be located in bin/packages/<architecture>/netgrok/.
--------------------------------------------------------------------------------


2: Installing and running the SSLsplit-NetGrok package on an OpenWRT router
--------------------------------------------------------------------------------
TODO
--------------------------------------------------------------------------------


3: Compiling an OpenWRT firmware image with SSLsplit-NetGrok included
--------------------------------------------------------------------------------
Reference:
https://openwrt.org/docs/guide-user/additional-software/beginners-build-guide

0. Checkout the latest stable release of OpenWRT:

git tag
git checkout <version>

1. Include the web interface in the build:

./scripts/feeds update luci
./scripts/feeds install luci

1. Select the relevant packages in the make menuconfig:
  a. LuCI -> Collections -> luci
  a. Network -> sslsplit-netgrok

2. Build the OpenWRT image. This will take some time:

make download
make -j 5
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
