How to Use SSLsplit
Lasted updated: 11:32 2018-07-30
--------------------------------------------------------------------------------
Reference: https://blog.heckel.xyz/2013/08/04/use-sslsplit-to-transparently-sniff-tls-ssl-connections/

For this example, I used two Ubuntu virtual machines on the same local network,
and SSLsplit version 0.5.3. Download SSLsplit onto the machine acting as the
server/router by cloning the GitHub repository at

  https://github.com/ghost-in-the-bash/sslsplit

Be sure to use

  make clean
  make

inside the sslsplit directory before running sslsplit.

Next, install libevent so sslsplit can handle large numbers of connections:

  sudo apt-get install libssl-dev libevent-dev


Method 0: SSLsplit on the Default Gateway
--------------------------------------------------------------------------------
This is the simplist way to use SSLsplit. The machine running SSLsplit acts as a
router (and man-in-the-middle) for the client.

1. A certificate and key are already included in the repo. Nevertheless, for
   reference, this is how the Certificate Authority certificate was created:

   openssl genrsa -out ca.key 4096
   openssl req -new -x509 -days 1826 -key ca.key -out ca.crt

2. Configure the router:

  a. Enable IP forwarding:

     sudo sysctl -w net.ipv4.ip_forward=1

  b. Delete all current NAT rules:

     sudo iptables -t nat -F

  c. Configure NAT to redirect packets to ports that SSLsplit listens to:

     iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080
     iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443
     iptables -t nat -A PREROUTING -p tcp --dport 465 -j REDIRECT --to-ports 8443
     iptables -t nat -A PREROUTING -p tcp --dport 587 -j REDIRECT --to-ports 8443
     iptables -t nat -A PREROUTING -p tcp --dport 993 -j REDIRECT --to-ports 8443
     iptables -t nat -A PREROUTING -p tcp --dport 5222 -j REDIRECT --to-ports 8080

     These rules redirect HTTP, HTTPS, SMTP, IMAP, and WhatsApp packets.

3. Run SSLsplit on the router (all in one line):

   ./sslsplit -S /tmp/sslsplit/ -k ca.key -c ca.cer ssl 0.0.0.0 8443 tcp 0.0.0.0 8080 | python3 netgrok.py

   The -S option normally would write the decrypted content of connections to
   log files. However, logbuf.c has been modified to write to stdout instead.
   Piping stdin to netgrok.py outputs a JSON dump of connections/properties.

5. Configure the client's web browser (if the CA cert is not already installed):

   a. Copy the ca.crt from the router's sslsplit directory over to the client
   b. Open up Firefox and go to Preferences > Privacy & Security >
      View Certificates > Authorities > Import, and then select the ca.crt

4. Configure the client's default gateway:

   a. Add a new default gateway (use the router's IP address):

      sudo route add default gw <router_ip_address>

   b. Delete the client's original default gateway:

      sudo route del default gw <gateway_ip_address>

Now you should be able to open up Firefox and go to any website. Click on the
secure HTTPS lock icon in the URL bar to display the certificate. It should be
verified by the CA in the router's sslsplit directory.
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
